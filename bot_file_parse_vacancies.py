import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_KEYWORD, ASK_SALARY, ASK_EMPLOYMENT, ASK_SCHEDULE, ASK_CITY = range(5)

AREA_MAP = {
    "–º–æ—Å–∫–≤–∞": 1,
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": 4,
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": 3,
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": 66,
    "–∫–∞–∑–∞–Ω—å": 88,
    "—á–µ–ª—è–±–∏–Ω—Å–∫": 104,
    "–æ–º—Å–∫": 68,
    "—Å–∞–º–∞—Ä–∞": 78,
    "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": 76,
    "—É—Ñ–∞": 99,
    "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": 54,
    "–ø–µ—Ä–º—å": 72,
    "–≤–æ—Ä–æ–Ω–µ–∂": 106,
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": 102,
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": 53
}

SCHEDULE_MAP = {
    "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "fullDay",
    "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫": "shift",
    "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫": "flexible",
    "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞": "remote",
    "–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥": "flyInFlyOut"
}

EMPLOYMENT_MAP = {
    "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "full",
    "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "part",
    "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "project",
    "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ": "volunteer",
    "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞": "probation"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

user_data_store = {}

def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫):")
    return ASK_KEYWORD

def ask_salary(update: Update, context: CallbackContext) -> int:
    user_data_store[update.effective_chat.id] = {"keyword": update.message.text.strip()}
    update.message.reply_text("üí∞ –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000):")
    return ASK_SALARY

def ask_employment(update: Update, context: CallbackContext) -> int:
    try:
        salary = int(update.message.text.strip())
    except ValueError:
        update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã:")
        return ASK_SALARY

    user_data_store[update.effective_chat.id]["salary"] = salary
    reply_keyboard = [[KeyboardButton(option)] for option in EMPLOYMENT_MAP.keys()]
    update.message.reply_text(
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_EMPLOYMENT

def ask_schedule(update: Update, context: CallbackContext) -> int:
    employment = update.message.text.strip()
    if employment not in EMPLOYMENT_MAP:
        update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return ASK_EMPLOYMENT

    user_data_store[update.effective_chat.id]["employment"] = EMPLOYMENT_MAP[employment]
    reply_keyboard = [[KeyboardButton(option)] for option in SCHEDULE_MAP.keys()]
    update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_SCHEDULE

def ask_city(update: Update, context: CallbackContext) -> int:
    schedule = update.message.text.strip()
    if schedule not in SCHEDULE_MAP:
        update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return ASK_SCHEDULE

    user_data_store[update.effective_chat.id]["schedule"] = SCHEDULE_MAP[schedule]
    cities = ", ".join(AREA_MAP.keys())
    update.message.reply_text(f"üìç –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {cities}):", reply_markup=ReplyKeyboardRemove())
    return ASK_CITY

def perform_search(update: Update, context: CallbackContext) -> int:
    city = update.message.text.strip()
    area_id = AREA_MAP.get(city.title(), 113)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –†–æ—Å—Å–∏—è
    user_data_store[update.effective_chat.id]["area"] = area_id

    data = user_data_store[update.effective_chat.id]
    summary = (
        f"üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π:\n"
        f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {data['keyword']}\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {data['salary']} —Ä—É–±.\n"
        f"–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {data['employment']}\n"
        f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {data['schedule']}\n"
        f"–ì–æ—Ä–æ–¥ (ID): {data['area']}\n\n"
        "(–¢—É—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤—ã–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–π)"
    )
    update.message.reply_text(summary)
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_KEYWORD: [MessageHandler(Filters.text & ~Filters.command, ask_salary)],
            ASK_SALARY: [MessageHandler(Filters.text & ~Filters.command, ask_employment)],
            ASK_EMPLOYMENT: [MessageHandler(Filters.text & ~Filters.command, ask_schedule)],
            ASK_SCHEDULE: [MessageHandler(Filters.text & ~Filters.command, ask_city)],
            ASK_CITY: [MessageHandler(Filters.text & ~Filters.command, perform_search)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()