import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ASK_KEYWORD, ASK_SALARY, ASK_EMPLOYMENT, ASK_SCHEDULE, ASK_CITY = range(5)

# –ö–∞—Ä—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
EMPLOYMENT_MAP = {
    "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "full",
    "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "part",
    "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "project",
    "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ": "volunteer",
    "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞": "probation"
}

SCHEDULE_MAP = {
    "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "fullDay",
    "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫": "shift",
    "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫": "flexible",
    "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞": "remote",
    "–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥": "flyInFlyOut"
}

AREA_MAP = {
    "–ú–æ—Å–∫–≤–∞": 1,
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": 4,
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": 3,
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": 53,
    "–†–æ—Å—Å–∏—è (–≤—Å—è)": 113
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.environ.get("BOT_TOKEN", "7404822521:AAEg_yhZ6OP8XDB2FzGwQTqSRfeDIen84AM")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

user_data_store = {}

def start(update: Update, context: CallbackContext) -> int:
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –≤–∞–∫–∞–Ω—Å–∏–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫):")
    return ASK_KEYWORD

def ask_salary(update: Update, context: CallbackContext) -> int:
    keyword = update.message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
    user_data_store[update.effective_chat.id] = {"keyword": keyword}
    update.message.reply_text("üí∞ –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100000):")
    return ASK_SALARY

def ask_employment(update: Update, context: CallbackContext) -> int:
    try:
        salary = int(update.message.text.strip())
    except ValueError:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞—Ä–ø–ª–∞—Ç—É")
        update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞—Ä–ø–ª–∞—Ç—ã:")
        return ASK_SALARY

    user_data_store[update.effective_chat.id]["salary"] = salary
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    reply_keyboard = [[KeyboardButton(option)] for option in EMPLOYMENT_MAP.keys()]
    logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {reply_keyboard}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏
    if not reply_keyboard:
        logger.error("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞!")
        update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ASK_SALARY

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    update.message.reply_text(
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"
        )
    )
    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    return ASK_EMPLOYMENT

def ask_schedule(update: Update, context: CallbackContext) -> int:
    employment = update.message.text.strip().title()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {employment}")
    if employment not in EMPLOYMENT_MAP:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {employment}")
        reply_keyboard = [[KeyboardButton(option)] for option in EMPLOYMENT_MAP.keys()]
        update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_EMPLOYMENT

    user_data_store[update.effective_chat.id]["employment"] = EMPLOYMENT_MAP[employment]
    reply_keyboard = [[KeyboardButton(option)] for option in SCHEDULE_MAP.keys()]
    update.message.reply_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_SCHEDULE

def ask_city(update: Update, context: CallbackContext) -> int:
    schedule = update.message.text.strip().title()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {schedule}")
    if schedule not in SCHEDULE_MAP:
        reply_keyboard = [[KeyboardButton(option)] for option in SCHEDULE_MAP.keys()]
        update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_SCHEDULE

    user_data_store[update.effective_chat.id]["schedule"] = SCHEDULE_MAP[schedule]
    reply_keyboard = [[KeyboardButton(option)] for option in AREA_MAP.keys()]
    update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_CITY

def perform_search(update: Update, context: CallbackContext) -> int:
    city = update.message.text.strip().title()
    area_id = AREA_MAP.get(city)
    if not area_id:
        reply_keyboard = [[KeyboardButton(option)] for option in AREA_MAP.keys()]
        update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return ASK_CITY

    user_data_store[update.effective_chat.id]["area"] = area_id
    data = user_data_store[update.effective_chat.id]
    summary = (
        f"üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π:\n"
        f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {data['keyword']}\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç: {data['salary']} —Ä—É–±.\n"
        f"–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏: {data['employment']}\n"
        f"–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: {data['schedule']}\n"
        f"–ì–æ—Ä–æ–¥ (ID): {data['area']}\n\n"
        "(–¢—É—Ç –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤—ã–≤–æ–¥ –≤–∞–∫–∞–Ω—Å–∏–π)"
    )
    update.message.reply_text(summary, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    logger.info("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update.message:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_KEYWORD: [MessageHandler(Filters.text & ~Filters.command, ask_salary)],
            ASK_SALARY: [MessageHandler(Filters.text & ~Filters.command, ask_employment)],
            ASK_EMPLOYMENT: [MessageHandler(Filters.text & ~Filters.command, ask_schedule)],
            ASK_SCHEDULE: [MessageHandler(Filters.text & ~Filters.command, ask_city)],
            ASK_CITY: [MessageHandler(Filters.text & ~Filters.command, perform_search)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)
    dp.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()