import os
import re
import logging
import requests
from time import sleep
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackContext, ConversationHandler
)
from bs4 import BeautifulSoup
import pandas as pd

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

AREA_MAP = {
    "–º–æ—Å–∫–≤–∞": 1,
    "—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥": 2,
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": 4,
    "–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": 3,
    "–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥": 66,
    "–∫–∞–∑–∞–Ω—å": 88,
    "—á–µ–ª—è–±–∏–Ω—Å–∫": 104,
    "–æ–º—Å–∫": 68,
    "—Å–∞–º–∞—Ä–∞": 78,
    "—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É": 76,
    "—É—Ñ–∞": 99,
    "–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫": 54,
    "–ø–µ—Ä–º—å": 72,
    "–≤–æ—Ä–æ–Ω–µ–∂": 106,
    "–≤–æ–ª–≥–æ–≥—Ä–∞–¥": 102,
    "–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä": 53
}

SCHEDULE_MAP = {
    "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "fullDay",
    "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫": "shift",
    "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫": "flexible",
    "–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞": "remote",
    "–í–∞—Ö—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥": "flyInFlyOut"
}

EMPLOYMENT_MAP = {
    "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "full",
    "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "part",
    "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å": "project",
    "–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ": "volunteer",
    "–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞": "probation"
}

(KEYWORD, SALARY, EMPLOYMENT, SCHEDULE, CITY) = range(5)
user_data = {}

def start(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:")
    return KEYWORD

def keyword_handler(update: Update, context: CallbackContext):
    user_data[update.effective_user.id] = {"keyword": update.message.text}
    update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É –æ—Ç (—á–∏—Å–ª–æ–º):")
    return SALARY

def salary_handler(update: Update, context: CallbackContext):
    try:
        user_data[update.effective_user.id]["salary"] = int(update.message.text)
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return SALARY

    keyboard = [[k] for k in EMPLOYMENT_MAP.keys()]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return EMPLOYMENT

def employment_handler(update: Update, context: CallbackContext):
    user_data[update.effective_user.id]["employment"] = EMPLOYMENT_MAP.get(update.message.text)

    keyboard = [[k] for k in SCHEDULE_MAP.keys()]
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SCHEDULE

def schedule_handler(update: Update, context: CallbackContext):
    user_data[update.effective_user.id]["schedule"] = SCHEDULE_MAP.get(update.message.text)
    update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return CITY

def city_handler(update: Update, context: CallbackContext):
    city = update.message.text.lower()
    user_data[update.effective_user.id]["area"] = AREA_MAP.get(city, 113)
    user_data[update.effective_user.id]["city_name"] = city.title()
    update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")
    perform_search(update, context)
    return ConversationHandler.END

def clean_html(html_text):
    return BeautifulSoup(html_text, "html.parser").get_text()

def get_full_description(vacancy_id):
    try:
        url = f"https://api.hh.ru/vacancies/{vacancy_id}"
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
        response.raise_for_status()
        return response.json().get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    except:
        return "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

def get_vacancies(params):
    all_vacancies = []
    for page in range(3):
        try:
            url = "https://api.hh.ru/vacancies"
            query = {
                "text": params["keyword"],
                "area": params["area"],
                "salary": params["salary"],
                "employment": params["employment"],
                "schedule": params["schedule"],
                "page": page,
                "per_page": 50
            }
            response = requests.get(url, params=query, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
            response.raise_for_status()
            data = response.json()
            for item in data.get("items", []):
                salary = item.get("salary")
                salary_info = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                if salary:
                    salary_info = f"{salary.get('from', '?')} - {salary.get('to', '?')} {salary.get('currency', '')}"
                all_vacancies.append({
                    "name": item.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"),
                    "company": item.get("employer", {}).get("name", "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"),
                    "salary": salary_info,
                    "description": clean_html(get_full_description(item["id"])),
                    "url": item.get("alternate_url", "#")
                })
            sleep(1)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {e}")
    return all_vacancies

def save_to_xlsx(vacancies, filename="vacancies.xlsx"):
    try:
        df = pd.DataFrame(vacancies)
        df.columns = ['–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ö–æ–º–ø–∞–Ω–∏—è', '–ó–∞—Ä–ø–ª–∞—Ç–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞']
        filepath = os.path.join(os.path.dirname(os.path.abspath(__file__)), filename)
        df.to_excel(filepath, index=False, engine='openpyxl')
        return filepath
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def perform_search(update: Update, context: CallbackContext):
    params = user_data[update.effective_user.id]
    vacancies = get_vacancies(params)
    if not vacancies:
        update.message.reply_text("–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    filepath = save_to_xlsx(vacancies)
    if filepath:
        with open(filepath, 'rb') as f:
            update.message.reply_document(f, filename="vacancies.xlsx", caption=f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π")

        preview = "\n".join(f"{i+1}. {v['name']} ({v['company']}) - {v['salary']}\n{v['url']}" for i, v in enumerate(vacancies[:5]))
        update.message.reply_text(f"üìã –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π:\n\n{preview}")


def cancel(update: Update, context: CallbackContext):
    update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            KEYWORD: [MessageHandler(Filters.text & ~Filters.command, keyword_handler)],
            SALARY: [MessageHandler(Filters.text & ~Filters.command, salary_handler)],
            EMPLOYMENT: [MessageHandler(Filters.text & ~Filters.command, employment_handler)],
            SCHEDULE: [MessageHandler(Filters.text & ~Filters.command, schedule_handler)],
            CITY: [MessageHandler(Filters.text & ~Filters.command, city_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()